#  LocalWords:  ImageDataGenerator

* <2017-01-05 Thu>
*** Splitting data into validation sets
    - No need for train_test_split, I think.  I think I can just use
      the =validation_split= argument of =model.fit=.
    - However, evidently the data aren't shuffled.  May have to figure
      out how to do that, or maybe not.
*** Shuffling the data during training.
    - No need for external tools.  I think I can just use the
      =shuffle= argument in =model.fit=.
* <2017-01-06 Fri>
*** Loading images with a generator
    - Usage of =ImageDataGenerator= is so tempting, because it's
      already set up to load images from a directory, scale them,
      normalize them, etc.
    - The problem is that it seems to be set up for classifying images
      labeled according to the directory that they're in.  It's a bit
      of a mystery how to use it for regression.
    - There's an intriguing mention of using =model.predict_generator=
      when using =ImageDataGenerator= without labeled classes, but for
      the life of me I can't figure out how to make it work.
    - I asked on the Keras Slack channel about this.  Hopefully,
      somebody will get back to me.
    - In the meantime I managed to write a Python generator that works
      with =model.fit_generator=.
*** Upcoming tasks
***** DONE Refactor the generator code.
******* DONE Parameterize batch size
******* DONE Make more concise
***** DONE Scale the model output to [-1, 1]
      Right now, I think it's nowhere near to that interval.  That
      can't possibly be good for training.
***** TODO Possibly kill the softmax activation function at the end.
***** DONE Parameterize the input shape dynamically based on input images.
***** DONE Probably scale down the input images.
***** TODO Possibly use cv2 edge-detection.  I mean, why not?
* <2017-01-09 Mon>
*** Batch numbers
    Try these:  samples_per_epoch=20480, bach_size=512, nb_epoch=6
* <2017-01-10 Tue>
  - Refactored data generator into a set of generic, composeable,
    lambda one-liner generator functions and generator expressions.
  - Using itertools.cycle to cycle through the data.  Note that this
    caches the data and so trades speed for memory.
  - May want to shuffle the data on each epoch.  If I do, the
    itertools.cycle may not be an appropriate solution.
  - In that case, I should load the index file into memory and shuffle
    /that/, and then read in the batches.
  - The modified NVidia model seems to work OK.
  - Should experiment with different image loaders.
  - Should experiment with different image sizes.
  - Should try using validation data again.
  - It's a shame the driving simulator doesn't send the other camera
    images.
  - I wonder if I can somehow save the image size into the model.json
    file so that it can be read by drive.py, avoiding hard-coding it
    there.
  - Really should experiment with the sample_weight parameter in the
    fit_generator function.
  - Alternatively, perhaps I can resample the training data into a
    different distribution.  Right now, it's heavily represented by
    samples with small steering angles, since most of the time the car
    is driving straight.
* <2017-01-11 Wed>
  - Implemented image/angle flipping and also sample weighting.
  - My model still basically produces no useful steering angles.
  - Tomorrow, I need to fold in validation data.
  - Also, need to analyze the training data that's being fed in.  Is
    it correct?
  - Plot a histogram of angles.
  - Plot a gallery of images, along with the angles.
  - Check the images that are being processed in drive.py.  Make sure
    they're the same shape, color, etc. as training data!
  - Again, may have to consider shuffling on every epoch.  Ugh, that's
    really going to slow things down.
  - Unless I can rewrite cycle so that it's a random cycler.
* <2017-01-12 Thu>
  - Analyzed the Udacity data, first.
  - Data have non-zero mean, non-zero skew, non-zero kurtosis.
  - Image-flipping if done carefully potentially should set the mean
    and skew to zero, and potentially fight leftward drift.
  - But, before doing any of that, I made some improvements to the
    generator util functions.
  - Also, fixed a major bug in drive.py, which finally allowed the
    model to make real steering angle predictions.  The car makes it
    to the bridge before ditching in the water!  That's progress.
* <2017-01-13 Fri>
  - Change to /exactly/ the NVidia model.  See if that helps.
  - Train for more epochs.  See if that helps.
  - More samples per epoch.
  - If the images will fit in memory, try =model.fit= instead of
    =model.fit_generator= and shuffle the data.
  - With =model.fit_generator=, try using the validation data.
  - With =model.fit=, try the validation split parameter.
  - If stuck with =model.fit_generator=, see about some kind of
    shuffling iterator.
  - If too many parameters, shrink the target image size, and the
    model accordingly.
  - Add random flipping.  See if that helps.
  - Just flip all the data and concatenate.  See if that helps.
